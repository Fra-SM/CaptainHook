/*
 * Auto-generated by Frida. Please modify to match the signature of printf.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
    /**
     * Called synchronously when about to call printf.
     *
     * @this {object} - Object allowing you to store state for use in onLeave.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {array} args - Function arguments represented as an array of NativePointer objects.
     * For example use args[0].readCString() if the first argument is a pointer to a C string encoded as UTF-8.
     * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
     * @param {object} state - Object allowing you to keep state across function calls.
     * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
     * However, do not use this to store function arguments across onEnter/onLeave, but instead
     * use "this" which is an object for keeping state local to an invocation.
     */

    /* DebugSymbol.findFunctionsMatching('*CWbem*').forEach(function (val){console.log(DebugSymbol.fromAddress(val))});
    const resolver = new ApiResolver('module');
    const matches = resolver.enumerateMatches('exports:*!Wmi*');
    JSON.stringify(matches); */

    /*
    const m = Process.enumerateModules()[0];
    const pattern = '77 6d 69'; //WMI
    const results = Memory.scanSync(m.base, m.size, pattern);
    console.log('Memory.scanSync() result:\n' +
    JSON.stringify(results)); */

    //the following hooks don't work because ExecQuery is a method from the COM interface

    /* HRESULT ExecQuery(
        [in]  const BSTR           strQueryLanguage, //BSTR is a WCHAR pointer
        [in]  const BSTR           strQuery,
        [in]  long                 lFlags,
        [in]  IWbemContext         *pCtx,
        [out] IEnumWbemClassObject **ppEnum
      ); */
    /* const ExecQuery = Module.getExportByName(null, 'ExecQuery');
    Interceptor.attach(ExecQuery, {
      onEnter(args) {
        send("[WMI] WMI ExecQuery detected: ");
        this.queryLanguage = args[0].readUtf16String();
        this.queryString = args[1].readUtf16String();
        console.log(this.queryString);
        if (this.queryLanguage === "WQL" && this.queryString.toUpperCase().includes("SELECT"))
            send("[WMI] ExecQuery - " + this.queryString);
      }
    });

    const ExecQueryAsync = Module.getExportByName(null, 'ExecQueryAsync');
    Interceptor.attach(ExecQueryAsync, {
      onEnter(args) {
        send("[WMI] WMI ExecQueryAsync detected: ");
        this.queryLanguage = args[0].readUtf16String();
        this.queryString = args[1].readUtf16String();
        console.log(this.queryString);
        if (this.queryLanguage === "WQL" && this.queryString.toUpperCase().includes("SELECT"))
            send("[WMI] ExecQueryAsync - " + this.queryString);
      }
    }); */

    /**
     * Called synchronously when about to return from printf.
     *
     * See onEnter for details.
     *
     * @this {object} - Object allowing you to access state stored in onEnter.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {NativePointer} retval - Return value represented as a NativePointer object.
     * @param {object} state - Object allowing you to keep state across function calls.
     */
  }