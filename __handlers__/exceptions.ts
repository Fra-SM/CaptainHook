/*
 * Auto-generated by Frida. Please modify to match the signature of printf.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
    /**
     * Called synchronously when about to call printf.
     *
     * @this {object} - Object allowing you to store state for use in onLeave.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {array} args - Function arguments represented as an array of NativePointer objects.
     * For example use args[0].readCString() if the first argument is a pointer to a C string encoded as UTF-8.
     * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
     * @param {object} state - Object allowing you to keep state across function calls.
     * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
     * However, do not use this to store function arguments across onEnter/onLeave, but instead
     * use "this" which is an object for keeping state local to an invocation.
     */

    const programPath = Process.enumerateModules()[0].path;
    const appModules = new ModuleMap(m => m.path.startsWith(programPath));

    const NtClose = Module.getExportByName('ntdll.dll', 'NtClose');
    Interceptor.attach(NtClose, {
      onLeave(retval) {
        if (!appModules.has(this.returnAddress))
            return;
        if (retval.toInt32() !== 0)
        {
            send("[Exception Handling] NtClose(INVALID_HANDLE)");
            retval.replace(ptr(0)); //fake STATUS_SUCCESS
        }
      }
    });

    const CloseHandle = Module.getExportByName('Kernel32.dll', 'CloseHandle');
    Interceptor.attach(CloseHandle, {
      onLeave(retval) {
        if (!appModules.has(this.returnAddress))
            return;
        if (retval.toInt32() === 0)
        {
            send("[Exception Handling] CloseHandle(INVALID_HANDLE)");
            retval.replace(ptr(1)); //fake success
        }
      }
    });

    //only evasive in combo with other techniques
    const SetUnhandledExceptionFilter = Module.getExportByName('Kernel32.dll', 'SetUnhandledExceptionFilter');
    Interceptor.attach(SetUnhandledExceptionFilter, {
      onEnter() {
        if (!appModules.has(this.returnAddress))
            return;
        send("[Exception Handling] SetUnhandledExceptionFilter");
      }
    });

    const OutputDebugStringA = Module.getExportByName('Kernel32.dll', 'OutputDebugStringA');
    Interceptor.attach(OutputDebugStringA, {
      onEnter(args) {
        if (!appModules.has(this.returnAddress))
            return;
        this.str = args[0].readAnsiString(); //LPCSTR lpOutputString
        if (this.str !== null)
            send("[Exception Handling] OutputDebugStringA - string: " + this.str);
      }
    });

    const OutputDebugStringW = Module.getExportByName('Kernel32.dll', 'OutputDebugStringW');
    Interceptor.attach(OutputDebugStringW, {
      onEnter(args) {
        if (!appModules.has(this.returnAddress))
            return;
        this.str = args[0].readUtf16String(); //LPCWSTR lpOutputString
        if (this.str !== null)
            send("[Exception Handling] OutputDebugStringW - string: " + this.str);
      }
    });

    /* const DebugBreak = Module.getExportByName('Kernel32.dll', 'DebugBreak');
    Interceptor.replace(DebugBreak, new NativeCallback(() => {send("[Exception Handling] DebugBreak");}, 'void', [])); */

    let isCtrlHandlerSet = false;

    const SetConsoleCtrlHandler = Module.getExportByName('Kernel32.dll', 'SetConsoleCtrlHandler');
    Interceptor.attach(SetConsoleCtrlHandler, {
      onLeave(retval) {
        if (!appModules.has(this.returnAddress))
            return;
        if (retval.toInt32() !== 0)
        {
            send("[Exception Handling] SetConsoleCtrlHandler");
            isCtrlHandlerSet = true;
        }
      }
    });

    const GenerateConsoleCtrlEvent = Module.getExportByName('Kernel32.dll', 'GenerateConsoleCtrlEvent');
    Interceptor.attach(GenerateConsoleCtrlEvent, {
      onEnter() {
        if (!appModules.has(this.returnAddress))
            return;
        if (isCtrlHandlerSet)
            send("[Exception Handling] GenerateConsoleCtrlEvent_after_SetConsoleCtrlHandler");
      }
    });

    const RaiseException = Module.getExportByName('Kernel32.dll', 'RaiseException');
    Interceptor.attach(RaiseException, {
      onEnter(args) {
        if (!appModules.has(this.returnAddress))
            return;
        this.excCode = args[0].toUInt32();
        if (this.excCode === 1073807366 || this.excCode === 1073807370)
            send("[Exception Handling] RaiseException(DBG_PRINTEXCEPTION_C)");
        if (this.excCode === 1073807365)
            send("[Exception Handling] RaiseException(DBG_CONTROL_C)");
        if (this.excCode === 1)
            send("[Others] SetHandleInformation(PROTECTED_HANDLE)");
      }
    });

    /**
     * Called synchronously when about to return from printf.
     *
     * See onEnter for details.
     *
     * @this {object} - Object allowing you to access state stored in onEnter.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {NativePointer} retval - Return value represented as a NativePointer object.
     * @param {object} state - Object allowing you to keep state across function calls.
     */
  }
