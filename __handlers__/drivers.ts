/*
 * Auto-generated by Frida. Please modify to match the signature of printf.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
    /**
     * Called synchronously when about to call printf.
     *
     * @this {object} - Object allowing you to store state for use in onLeave.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {array} args - Function arguments represented as an array of NativePointer objects.
     * For example use args[0].readCString() if the first argument is a pointer to a C string encoded as UTF-8.
     * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
     * @param {object} state - Object allowing you to keep state across function calls.
     * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
     * However, do not use this to store function arguments across onEnter/onLeave, but instead
     * use "this" which is an object for keeping state local to an invocation.
     */
  
    const programPath = Process.enumerateModules()[0].path;
    const appModules = new ModuleMap(m => m.path.startsWith(programPath));
    const onlyAppCode = true;

    let drivers_blacklist = [
        //"vboxnetadp6.sys",
        "vmnetadapter.sys",
        //"vboxnetlwf.sys",
        //"vboxusbmon.sys",
        //"vboxdrv.sys",
        "vmhgfs.sys",
        "vmmemctl.sys",
        "vmmouse.sys",
        "vmrawdsk.sys",
        //"vboxmouse.sys",
        //"vboxguest.sys",
        //"vboxsf.sys",
        //"vboxvideo.sys",
        "vmusbmouse.sys",
        "vm3dmp.sys",
        "vm3dmp_loader.sys",
        "vmci.sys",
        "vmx86.sys",
        "vmkdb.sys",
        "vmnetuserif.sys",
        "vmusb.sys",
        "vmnet.sys",
        "balloon.sys",
        "netkvm.sys",
        "pvpanic.sys",
        "viofs.sys",
        "viogpudo.sys",
        "vioinput.sys",
        "viorng.sys",
        "vioscsi.sys",
        "vioser.sys",
        "viostor.sys",
        "vbox",
        "vmware",
        "hyper"
    ];

    //we put "null" as these APIs can reside in different modules depending on the Windows version
    const EnumDeviceDrivers = Module.getExportByName(null, 'EnumDeviceDrivers');
    Interceptor.attach(EnumDeviceDrivers, {
      onEnter() {
        if (!appModules.has(this.returnAddress) && onlyAppCode)
            return;
        send("[Drivers] EnumDeviceDrivers");
      }
    });

    const GetDeviceDriverBaseNameA = Module.getExportByName(null, 'GetDeviceDriverBaseNameA');
    Interceptor.attach(GetDeviceDriverBaseNameA, {
      onEnter(args) {
        this.lpFilename = args[1]; //LPSTR lpFilename
        this.driver = this.lpFilename.readAnsiString(); //string pointed to
      },
   
      onLeave() {
        if (!appModules.has(this.returnAddress) && onlyAppCode)
            return;
        for (let d of drivers_blacklist) {
            if (this.driver.toLowerCase().includes(d))
            {
                send("[Drivers] GetDeviceDriverBaseName - driver checked: " + this.driver);
                //replace the driver's name if blacklisted
                this.lpFilename.writeAnsiString('meow.sys');
                //console.log(this.lpFilename.readAnsiString());
            }       
        }
      }
    });

    const GetDeviceDriverBaseNameW = Module.getExportByName(null, 'GetDeviceDriverBaseNameW');
    Interceptor.attach(GetDeviceDriverBaseNameW, {
      onEnter(args) {
        this.lpFilename = args[1]; ////LPWSTR lpFilename
        this.driver = this.lpFilename.readUtf16String(); //string pointed to
      },
   
      onLeave() {
        if (!appModules.has(this.returnAddress) && onlyAppCode)
            return;
        for (let d of drivers_blacklist) {
            if (this.driver.toLowerCase().includes(d))
            {
                send("[Drivers] GetDeviceDriverBaseName - driver checked: " + this.driver);
                //replace the driver's name if blacklisted
                this.lpFilename.writeUtf16String('meow.sys');
                //console.log(this.lpFilename.readUtf16String());
            }       
        }
      }
    });

    const GetDeviceDriverFileNameA = Module.getExportByName(null, 'GetDeviceDriverFileNameA');
    Interceptor.attach(GetDeviceDriverFileNameA, {
      onEnter(args) {
        this.lpFilename = args[1]; //LPSTR lpFilename
        this.driver = this.lpFilename.readAnsiString(); //string pointed to
      },
   
      onLeave() {
        if (!appModules.has(this.returnAddress) && onlyAppCode)
            return;
        for (let d of drivers_blacklist) {
            if (this.driver.toLowerCase().includes(d))
            {
                send("[Drivers] GetDeviceDriverFileName - driver checked: " + this.driver);
                //replace the driver's name if blacklisted
                this.lpFilename.writeAnsiString('meow.sys');
                //console.log(this.lpFilename.readAnsiString());
            }       
        }
      }
    });

    const GetDeviceDriverFileNameW = Module.getExportByName(null, 'GetDeviceDriverFileNameW');
    Interceptor.attach(GetDeviceDriverFileNameW, {
      onEnter(args) {
        this.lpFilename = args[1]; //LPWSTR lpFilename
        this.driver = this.lpFilename.readUtf16String(); //string pointed to
      },
   
      onLeave() {
        if (!appModules.has(this.returnAddress) && onlyAppCode)
            return;
        for (let d of drivers_blacklist) {
            if (this.driver.toLowerCase().includes(d))
            {
                send("[Drivers] GetDeviceDriverFileName - driver checked: " + this.driver);
                //replace the driver's name if blacklisted
                this.lpFilename.writeUtf16String('meow.sys');
                //console.log(this.lpFilename.readUtf16String());
            }       
        }
      }
    });

    /**
     * Called synchronously when about to return from printf.
     *
     * See onEnter for details.
     *
     * @this {object} - Object allowing you to access state stored in onEnter.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {NativePointer} retval - Return value represented as a NativePointer object.
     * @param {object} state - Object allowing you to keep state across function calls.
     */
  }
